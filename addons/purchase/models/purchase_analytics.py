# -*- coding: utf-8 -*-
"""
Kids Clothing ERP - Purchase Analytics
======================================

Purchase analytics and reporting for kids clothing retail.
"""

from core_framework.orm import BaseModel, CharField, TextField, BooleanField, IntegerField, DateTimeField, Many2OneField, SelectionField, FloatField, One2ManyField, Many2ManyField
from core_framework.orm import Field
from typing import Dict, Any, Optional
import logging
from datetime import datetime, timedelta
from core_framework.exceptions import ValidationError

logger = logging.getLogger(__name__)

class PurchaseAnalytics(BaseModel):
    """Purchase analytics and reporting"""
    
    _name = 'purchase.analytics'
    _description = 'Purchase Analytics'
    _table = 'purchase_analytics'
    
    # Basic Information
    name = CharField(
        string='Analytics Report',
        size=100,
        required=True,
        help='Name of the analytics report'
    )
    
    report_date = DateTimeField(
        string='Report Date',
        default=datetime.now,
        required=True,
        help='Date of the analytics report'
    )
    
    # Purchase Statistics
    total_orders = IntegerField(
        string='Total Orders',
        help='Total number of purchase orders'
    )
    
    total_amount = FloatField(
        string='Total Amount',
        digits=(16, 2),
        help='Total purchase amount'
    )
    
    average_order_value = FloatField(
        string='Average Order Value',
        digits=(16, 2),
        help='Average value per purchase order'
    )
    
    total_suppliers = IntegerField(
        string='Total Suppliers',
        help='Total number of active suppliers'
    )
    
    # Kids Clothing Specific Analytics
    orders_by_age_group = TextField(
        string='Orders by Age Group',
        help='Purchase orders breakdown by age group'
    )
    
    orders_by_season = TextField(
        string='Orders by Season',
        help='Purchase orders breakdown by season'
    )
    
    orders_by_gender = TextField(
        string='Orders by Gender',
        help='Purchase orders breakdown by gender'
    )
    
    orders_by_occasion = TextField(
        string='Orders by Occasion',
        help='Purchase orders breakdown by special occasion'
    )
    
    # Top Suppliers
    top_suppliers = TextField(
        string='Top Suppliers',
        help='Top suppliers by purchase volume'
    )
    
    # Top Products
    top_products = TextField(
        string='Top Products',
        help='Top products by purchase volume'
    )
    
    # Seasonal Analysis
    seasonal_trends = TextField(
        string='Seasonal Trends',
        help='Seasonal purchasing trends'
    )
    
    # Performance Metrics
    order_fulfillment_rate = FloatField(
        string='Order Fulfillment Rate',
        digits=(5, 2),
        help='Percentage of orders fulfilled on time'
    )
    
    supplier_performance_score = FloatField(
        string='Supplier Performance Score',
        digits=(5, 2),
        help='Overall supplier performance score'
    )
    
    cost_savings = FloatField(
        string='Cost Savings',
        digits=(16, 2),
        help='Total cost savings achieved'
    )
    
    # Additional Information
    notes = TextField(
        string='Notes',
        help='Additional notes for this analytics report'
    )
    
    user_id = Many2OneField(
        'res.users',
        string='Generated By',
        default=lambda self: self.env.user,
        help='User who generated this report'
    )
    
    company_id = Many2OneField(
        'res.company',
        string='Company',
        required=True,
        help='Company for this analytics report'
    )
    
    # Timestamps
    create_date = DateTimeField(
        string='Created On',
        default=datetime.now,
        help='Date when the record was created'
    )
    
    write_date = DateTimeField(
        string='Last Updated On',
        default=datetime.now,
        help='Date when the record was last updated'
    )
    
    def create(self, vals):
        """Override create to set default values"""
        if 'name' not in vals:
            vals['name'] = self._generate_report_name()
        
        if 'company_id' not in vals:
            vals['company_id'] = self.env.user.company_id.id
        
        return super().create(vals)
    
    def write(self, vals):
        """Override write to update timestamps"""
        vals['write_date'] = datetime.now()
        return super().write(vals)
    
    def _generate_report_name(self):
        """Generate report name"""
        return f"Purchase Analytics - {datetime.now().strftime('%Y-%m-%d')}"
    
    def action_generate_report(self):
        """Generate analytics report"""
        for record in self:
            record._calculate_purchase_statistics()
            record._calculate_kids_clothing_analytics()
            record._calculate_performance_metrics()
    
    def _calculate_purchase_statistics(self):
        """Calculate purchase statistics"""
        # Get purchase orders for the current period
        orders = self.env['purchase.order'].search([
            ('create_date', '>=', self.report_date.replace(day=1)),
            ('create_date', '<', (self.report_date.replace(day=1) + timedelta(days=32)).replace(day=1)),
        ])
        
        self.total_orders = len(orders)
        self.total_amount = sum(order.amount_total for order in orders)
        self.average_order_value = self.total_amount / self.total_orders if self.total_orders > 0 else 0
        
        # Get unique suppliers
        suppliers = set(order.partner_id.id for order in orders)
        self.total_suppliers = len(suppliers)
    
    def _calculate_kids_clothing_analytics(self):
        """Calculate kids clothing specific analytics"""
        orders = self.env['purchase.order'].search([
            ('create_date', '>=', self.report_date.replace(day=1)),
            ('create_date', '<', (self.report_date.replace(day=1) + timedelta(days=32)).replace(day=1)),
        ])
        
        # Age group analysis
        age_groups = {}
        for order in orders:
            if order.age_group:
                age_groups[order.age_group] = age_groups.get(order.age_group, 0) + 1
        self.orders_by_age_group = str(age_groups)
        
        # Season analysis
        seasons = {}
        for order in orders:
            if order.season:
                seasons[order.season] = seasons.get(order.season, 0) + 1
        self.orders_by_season = str(seasons)
        
        # Gender analysis
        genders = {}
        for order in orders:
            if order.gender:
                genders[order.gender] = genders.get(order.gender, 0) + 1
        self.orders_by_gender = str(genders)
        
        # Occasion analysis
        occasions = {}
        for order in orders:
            if order.special_occasion:
                occasions[order.special_occasion] = occasions.get(order.special_occasion, 0) + 1
        self.orders_by_occasion = str(occasions)
    
    def _calculate_performance_metrics(self):
        """Calculate performance metrics"""
        orders = self.env['purchase.order'].search([
            ('create_date', '>=', self.report_date.replace(day=1)),
            ('create_date', '<', (self.report_date.replace(day=1) + timedelta(days=32)).replace(day=1)),
        ])
        
        # Calculate fulfillment rate
        fulfilled_orders = orders.filtered(lambda o: o.state == 'done')
        self.order_fulfillment_rate = (len(fulfilled_orders) / len(orders) * 100) if orders else 0
        
        # Calculate supplier performance (simplified)
        self.supplier_performance_score = 85.0  # Placeholder
        
        # Calculate cost savings (simplified)
        self.cost_savings = self.total_amount * 0.05  # 5% savings placeholder
    
    def action_view_orders(self):
        """View purchase orders for this period"""
        return {
            'type': 'ocean.actions.act_window',
            'name': 'Purchase Orders',
            'res_model': 'purchase.order',
            'view_mode': 'tree,form',
            'domain': [
                ('create_date', '>=', self.report_date.replace(day=1)),
                ('create_date', '<', (self.report_date.replace(day=1) + timedelta(days=32)).replace(day=1)),
            ],
        }
    
    def action_view_suppliers(self):
        """View suppliers"""
        return {
            'type': 'ocean.actions.act_window',
            'name': 'Suppliers',
            'res_model': 'res.partner',
            'view_mode': 'tree,form',
            'domain': [('is_supplier', '=', True)],
        }
    
    def get_analytics_summary(self):
        """Get analytics summary"""
        return {
            'total_orders': self.total_orders,
            'total_amount': self.total_amount,
            'average_order_value': self.average_order_value,
            'total_suppliers': self.total_suppliers,
            'fulfillment_rate': self.order_fulfillment_rate,
            'performance_score': self.supplier_performance_score,
            'cost_savings': self.cost_savings,
        }